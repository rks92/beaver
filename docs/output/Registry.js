Ext.data.JsonP.Registry({"tagname":"class","name":"Registry","autodetected":{},"files":[{"filename":"Registry.js","href":"Registry.html#Registry"}],"owner":null,"members":[{"name":"constructor","tagname":"method","owner":"Registry","id":"method-constructor","meta":{}},{"name":"registerHook","tagname":"method","owner":"Registry","id":"method-registerHook","meta":{}},{"name":"registerTask","tagname":"method","owner":"Registry","id":"method-registerTask","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Registry","short_doc":"The Registry is a central object where all tasks that need to be executed get registered. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Registry.html#Registry' target='_blank'>Registry.js</a></div></pre><div class='doc-contents'><p>The Registry is a central object where all tasks that need to be executed get registered.</p>\n\n<p>{Object}  tasks     An object mapping task-names to descriptions of those tasks</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Registry'>Registry</span><br/><a href='source/Registry.html#Registry-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Registry-method-constructor' class='name expandable'>Registry</a>( <span class='pre'>options</span> ) : <a href=\"#!/api/Registry\" rel=\"Registry\" class=\"docClass\">Registry</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Construct the worker registry. ...</div><div class='long'><p>Construct the worker registry.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object<div class='sub-desc'><p>An options object containing each of the following fields:</p>\n<ul><li><span class='pre'>defaultTimeout</span> : Number (optional)<div class='sub-desc'><ul>\n<li>This is the default timeout for all tasks across the system. If this is not set,\n                                         all tasks must have a timeout set on their task options. When set to null,\n                                         this is the same as disabling timeouts by default.</li>\n</ul>\n\n</div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Registry\" rel=\"Registry\" class=\"docClass\">Registry</a></span><div class='sub-desc'><p>A freshly created Registry object.</p>\n</div></li></ul></div></div></div><div id='method-registerHook' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Registry'>Registry</span><br/><a href='source/Registry.html#Registry-method-registerHook' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Registry-method-registerHook' class='name expandable'>registerHook</a>( <span class='pre'>hook, func</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Allows registering general purpose hooks that can be called in a variety of circumstances. ...</div><div class='long'><p>Allows registering general purpose hooks that can be called in a variety of circumstances.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hook</span> : Object<div class='sub-desc'><ul>\n<li>The name of the hook to be plugged into. The following are acceptable hooks:</li>\n</ul>\n\n\n<p>\"queue\" - This is a hook that is called when a task is being queued. The function should be in the form function(task, done)\n          You can record additional information to be stored with the task before it is queued using task.saveMetadata</p>\n\n<p>\"start\" - This is a hook that is called just prior to a task starting execution. The function should be in the form function(task, done)</p>\n\n<p>\"log\" - This is a hook that will be called every time a log message is emitted by a task. The function should be in the form function(task, log_level, message, done)</p>\n\n<p>\"percentageComplete\" - This is a hook that will be called every time the client changes the percent completion of the task. The function should be in the form function(task, percent, done)</p>\n\n<p>\"result\" - This is a hook that will be called anytime a task registers a result value. The function should be in the form function(task, result, done)</p>\n\n<p>\"finish\" - This is a hook that will be called when a task finishes successfully. This hook is mutually exclusive with the \"error\" hook. The function should be in the form function(task, done)</p>\n\n<p>\"error\" - This is a hook that will be called if a task sends back an error. This hook is mutually exclusive with the \"finish\" hook. The function should be in the form function(task, error, done)</p>\n</div></li><li><span class='pre'>func</span> : Object<div class='sub-desc'><ul>\n<li>The function to be called when the triggering event for the hook occurs. The function form varies depending on the hook.</li>\n</ul>\n\n</div></li></ul></div></div></div><div id='method-registerTask' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Registry'>Registry</span><br/><a href='source/Registry.html#Registry-method-registerTask' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Registry-method-registerTask' class='name expandable'>registerTask</a>( <span class='pre'>task</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a task that can be executed ...</div><div class='long'><p>Register a task that can be executed</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>task</span> : Object<div class='sub-desc'><ul>\n<li>Task is an object containing information about the task being registered.</li>\n</ul>\n\n<ul><li><span class='pre'>name</span> : <div class='sub-desc'><ul>\n<li>A machine-readable name representing the task</li>\n</ul>\n\n</div></li><li><span class='pre'>func</span> : <div class='sub-desc'><ul>\n<li>A function in the form of function(parameters, done) {} which executes the task itself.\n\n<pre><code>              - parameters will be an object containing all parameters that were given for this task.\n              - done is the callback that should called when the task has finished executing.\n\n              The function will be called with a Task instance as this. Task instances have a few\n              additional functions. @see Task\n</code></pre></li>\n</ul>\n\n</div></li><li><span class='pre'>schedule</span> : <div class='sub-desc'><ul>\n<li>An object containing information about how to schedule this task, if this is an automatically\n                     scheduled task.</li>\n</ul>\n\n<ul><li><span class='pre'>interval</span> : <div class='sub-desc'><ul>\n<li>The number of milliseconds between executions of this task.</li>\n</ul>\n\n</div></li></ul></div></li><li><span class='pre'>timeout</span> :  (optional)<div class='sub-desc'><ul>\n<li>The timeout on the task. If set to null, the task will only close when finished.\n           All tasks should set timeouts! Otherwise hung / badly programmed tasks may bring\n           your worker to a halt. This field is mandatory unless a defaultTimeout is set\n           registry-wide. Timeout may impose a maximum runtime on the task.</li>\n</ul>\n\n</div></li><li><span class='pre'>redactParameters</span> : Array (optional)<div class='sub-desc'><ul>\n<li>This can be used to provide a list of parameters that must be redacted if the task is\n                                       stored in a database anywhere. This can prevent parameters such as passwords from\n                                        being stored anywhere permanently.\n}</li>\n</ul>\n\n</div></li></ul></div></li></ul></div></div></div></div></div></div></div>","meta":{}});