Ext.data.JsonP.global({"tagname":"class","name":"global","alternateClassNames":[],"members":[{"name":"__proto__","tagname":"property","owner":"global","id":"property-__proto__","meta":{}},{"name":"exports","tagname":"property","owner":"global","id":"property-exports","meta":{}},{"name":"use strict","tagname":"property","owner":"global","id":"property-use strict","meta":{}},{"name":"Schema","tagname":"method","owner":"global","id":"method-Schema","meta":{}},{"name":"getJobModel","tagname":"method","owner":"global","id":"method-getJobModel","meta":{}},{"name":"plugin","tagname":"method","owner":"global","id":"method-plugin","meta":{}}],"aliases":{},"files":[{"filename":"","href":""}],"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><div class='doc-contents'><p>Global variables and functions.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-__proto__' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='global'>global</span><br/><a href='source/AMQPConnectionError.html#global-property-__proto__' target='_blank' class='view-source'>view source</a></div><a href='#!/api/global-property-__proto__' class='name expandable'>__proto__</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'><p>Inherit from Error</p>\n</div><div class='long'><p>Inherit from Error</p>\n</div></div></div><div id='property-exports' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='global'>global</span><br/><a href='source/AMQPConnectionError.html#global-property-exports' target='_blank' class='view-source'>view source</a></div><a href='#!/api/global-property-exports' class='name expandable'>exports</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'><p>Expose <code>AMQPConnectionError</code>.</p>\n</div><div class='long'><p>Expose <code>AMQPConnectionError</code>.</p>\n</div></div></div><div id='property-use strict' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='global'>global</span><br/><a href='source/AMQPConnectionError.html#global-property-use strict' target='_blank' class='view-source'>view source</a></div><a href='#!/api/global-property-use strict' class='name expandable'>use strict</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'><p>AMQPConnectionError.js</p>\n\n<p>Represents connection errors for AMQP</p>\n</div><div class='long'><p>AMQPConnectionError.js</p>\n\n<p>Represents connection errors for AMQP</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-Schema' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='global'>global</span><br/><a href='source/MongoosePlugin.html#global-method-Schema' target='_blank' class='view-source'>view source</a></div><a href='#!/api/global-method-Schema' class='name expandable'>Schema</a>( <span class='pre'>name, taskOptions, func</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>.task\n\nThe register task function is added to the schema / model objects to provide the API that will register tasks\n...</div><div class='long'><p>.task</p>\n\n<p>The register task function is added to the schema / model objects to provide the API that will register tasks\nfor this plugin to execute</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'><ul>\n<li>the name of the task to be registered</li>\n</ul>\n\n</div></li><li><span class='pre'>taskOptions</span> : Object<div class='sub-desc'><ul>\n<li>an object containing options for the task to be registered.</li>\n</ul>\n\n<ul><li><span class='pre'>filter</span> : <div class='sub-desc'><ul>\n<li>a mandatory field which indicates which objects the task will be executed on. Must be in the form\n                      of a Mongo-style query. Supported operators: $in, $nin, $exists, $gte, $gt, $lte, $lt, $eq, $ne, $mod,\n                      $all, $and, $or, $nor, $not, $size, $type, $regex, $where, $elemMatch (taken from the sift library)</li>\n</ul>\n\n</div></li><li><span class='pre'>dbScanInterval</span> : <div class='sub-desc'><ul>\n<li><p>This is the number of milliseconds between when the Mongoose plugin will scan the database\n                                   for any objects that were missed from the on-save hooks. Defaults to one hour. If set to null\n                                   or zero, database scanning will be disabled, and you will depend entirely on post-save hooks.</p>\n\n<pre><code>                               DB Scanning can take advantage of Job objects when createMongoJobs is set to true on the plugin\n                               options in order to prevent double queueing the same object.\n</code></pre></li>\n</ul>\n\n</div></li></ul></div></li><li><span class='pre'>func</span> : Object<div class='sub-desc'><ul>\n<li>The function which is the task itself. Must be in the form function(object, callback) which receives the object\n            that has matched the filter as its argument.</li>\n</ul>\n\n</div></li></ul></div></div></div><div id='method-getJobModel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='global'>global</span><br/><a href='source/MongoosePlugin.html#global-method-getJobModel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/global-method-getJobModel' class='name expandable'>getJobModel</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This function can be used to return the Mongoose Model object which represents tasks being executed in the system. ...</div><div class='long'><p>This function can be used to return the Mongoose Model object which represents tasks being executed in the system. Used when createMongoJobs is set to true\n in the plugin options.</p>\n</div></div></div><div id='method-plugin' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='global'>global</span><br/><a href='source/MongoosePlugin.html#global-method-plugin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/global-method-plugin' class='name expandable'>plugin</a>( <span class='pre'>options</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This function can be used as a plugin to a mongoose schema. ...</div><div class='long'><p>This function can be used as a plugin to a mongoose schema. Example:</p>\n\n<pre><code> var mongoose = require('mongoose');\n var beaver = require('taskbeaver');\n\n var registry = new beaver.Registry({});\n\n var queue = new beaver.AMQPQueue(registry, {url: \"amqp://localhost\"});\n\n var UserSchema = new mongoose.Schema({\n     name: String\n });\n\n UserSchema.plugin(beaver.MongoosePlugin, {\n     model: 'User',\n     queue: queue\n });\n\n UserSchema.task(\"execute_stuff\", {name: \"bethany\"}, function(user, next)\n {\n     console.log(\"this code will only execute when a user object is found with the name bethany!\");\n     user.name = \"not!\";\n     user.save(next);\n }\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object<div class='sub-desc'><p>is a dictionary with the following potential options:</p>\n\n<pre><code> queue: The queue where the tasks are to be queued for execution.\n model: The name of the model this task is meant to be executed on.\n</code></pre>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});